[{"content":"Talk PDF and sources are available here, and are under CC0 (Public Domain) license.\nMy work on silicon chips reverse engineering or Degate is a hobby, and doesn\u0026rsquo;t constitute my main area of expertise, and is not related to what I do professionally (mostly malware development/analysis). Everything here was done in my spare time.\nIntroduction In 2024, I participated in multiple conferences/events to present the silicon chips reverse engineering domain, and more precisely Degate. This post depicts this journey.\ngantt title Talk\u0026#39;s Journey dateFormat YYYY-MM-DD todayMarker off tickInterval 2month Talk Creation: a1, 2024-02-15, 2024-05-08 Bière Sécu Rennes 2: milestone, crit, m1, 2024-05-14, 0d FSiC2024: milestone, crit, m2, 2024-06-20, 0d HTB Meetup Rennes: milestone, crit, m3, 2024-09-05, 0d SecSea2k24: milestone, crit, m4, 2024-10-12, 0d To give some context on the talk, a small introduction around silicon chips reverse engineering and Degate is available below.\nSilicon Chips Reverse Engineering To assess the security of a product or software, you can use a wide range of procedures, even under Black Box conditions. For example, you can use software reverse engineering to audit a proprietary firmware, perform dynamic analysis on an undocumented binary or analyze output traffic. However, when it comes to hardware implementations, things can get complicated. What can we do against a cryptographic algorithm that may be weak, but totally undocumented, and that is implemented directly into the silicon, using transistors and logic gates? Fortunately, there are some techniques available to tackle this specific issue and retrieve information about a hardware implementation, such as side-channel attacks or silicon chips reverse engineering (not exhaustive).\nSide channel attacks are quite widely explored, but silicon chips reverse engineering isn\u0026rsquo;t. Here the idea is to retrieve an algorithm implemented directly into the silicon, using transistors, from only a chip as base material. The process is analogous to software reverse engineering, where you start from a binary, and then retrieve assembly and then code. But here, we’ll start with a silicon chip, get images, then identify transistors, logic gates, retrieve the netlist and then the underlying algorithm. Simplifying, we can see side channel attacks as dynamic analysis, and silicon chips reverse engineering as static analysis. Chips reverse engineering can be used in many different use cases, from old hardware analysis to build software emulators to intellectual property check, passing by vulnerabilities and backdoors identification. It can also be used by foundries to perform fault and failure detection, but they are not working at the same scale.\nSilicon chips reverse engineering can be cut into five main steps:\nChip capture using decapsulation, delayering, stitching and more. Transistor and gate identification. Wires and vias analysis, connecting all the identified gates. Netlist generation, allowing simulation and error spotting. Algorithm retrieval with an additional analysis step, when the netlist is too big or too complex to be exploited directly. The image below is summarizing that process:\nTo perform that process, we first need to capture the chip, this passes by decapsulation, the selection of an area of interest, delayering, cleaning and stitching. Then, we have to analyze each specific gate layout to build our gate library, starting with transistors. Using pattern matching, we can then use that library to retrieve all other gate instances. After that, we need to trace the wires and vias to connect together all the identified gates, inputs and outputs. Which will give us, after having described each gate in an HDL language, the full netlist. We can simulate that netlist to start spotting errors in the analysis. And, if the netlist is huge, we can use automated processes and methods to extract the underlying algorithm, discover specification and build a software emulator.\nThe below image present an example of a logic gate analysis:\nAnalyzing transistors is the base task of silicon chips reverse engineering, and is mostly manual work, even if it can be automated for some capture method using auto-vectorization. At first glance it can be seen as a hard process to master, but in the end transistor identification is easy with practice. In reality, the hardest challenge is wires and vias identification, which impose at least semi-automation since there is so much wires on a chip. Any mistake is very difficult to spot, and can impact the whole resulting netlist. And if you add obfuscation, like creating false wires or vias, the analysis can become a nightmare.\nIf you are interested in a deeper explanation/presentation of silicon chips reverse engineering, please refer to the talk materials. I also may post a full blog post on the subject, if there is interest.\nDegate As described before, silicon chips reverse engineering is a complex process that can take months. Therefore automation is the key, and here come Degate, a multi-platform and open source software for semi-automatic VLSI chips reverse engineering. It offers a GUI and help on multiple steps of the process of reversing a silicon chip. It’s a medium-sized software with fewer than one hundred thousand lines of codes. It supports the three major OSes and is Qt based. Translations are available for multiple language to ease the adoption. It offers many features like gate definition, gate, via and wire matching or electrical rule checks for error spotting.\nDegate help to reverse VLSI chips by creating a gate library from your analysis, provides algorithms for template matching used for finding gate instances, can perform wires and vias matching, allows exporting netlist or can simply help navigate really huge images. Here the focus is on modern ICs with standard cells, and Degate support any 2D capture or imaging method. Hence, contrary to many commercial products, we don’t force any specific capture method and try to support as many possible.\nDegate is not a new software, it has already quite a long history. Therefore, it also comes with some technical debt since we tried to follow major IC evolution, like in transistor size and count. Degate was first started by Martin Schobert during his master’s thesis, in 2007, with some famous hardware cipher analysis performed using the software. But, at the end of Martin’s thesis in 2010, a minimum maintenance period occurred. No major feature was added, and the field was quite silent. I forked the initial version of Degate in 2018 and did a major rewrite, with a near 70% code rewritten from scratch.\nThe current version of Degate focus on gate library system, automatic gate instances identification, and wires \u0026amp; vias recognition. We also fully provide netlist generation in multiple formats. However we don’t currently support transistors and gate analysis or automatic identification, and don’t help on netlist analysis. In the next major release of Degate we plan to extend that coverage.\nSince 2018, I\u0026rsquo;m the official maintainer of Degate, and lead the development of the software.\nConferences I had the chance to be contacted by the Free Silicon Foundation at the start of 2024 to perform a talk on Degate at FSiC 2024. With such opportunity, I created a support from scratch presenting silicon chips reverse engineering and Degate. I then started to perform this talk to different events and conferences, starting in May 2024 until October 2024.\nThe following sections present those events and conferences. Also please note that the full presentation deck is too large to fully be presented during each talk, so each time I make a presentation on the subject, the support differ a bit.\nLocal events I participated in two local events, in Rennes, namely \u0026ldquo;Bière Sécu\u0026rsquo; Rennes\u0026rdquo; (in May) and \u0026ldquo;Hack the Box Meetup\u0026rdquo; (in September). These smaller events are interesting to battle-test new talks, but are also full of profiles we don\u0026rsquo;t generally see at other bigger conferences (in my opinion). This allowed many great discussions about Degate, that even were the most technical ones.\nBefore going to those events, and particularly to the first (Bière Sécu\u0026rsquo; Rennes), I wasn\u0026rsquo;t very confident that the subject could interest anyone, since it is very technical and touch very uncommon subjects. However, I had very positive feedback from people of very different backgrounds. The introduction of the silicon chips reverse engineering field seemed to have been very appreciated, to my surprise.\nAs a side note, I will try to present a new talk in these local events soon (should be on malware development).\nFree Silicon Conference 2024 I had the chance to be invited by the Free Silicon Foundation to give a talk in June 2024, which allowed me to discover their implication for more open chips/SoC. The F-Si Foundation is a nonprofit organization which promote Free and Open Source (FOS) Computer-Aided Design (CAD) tools/software (for integrated circuits design), hardware designs and libraries, common standards and freedom of users. Since 2019 (with a pause due to the pandemic), they organize the Free Silicon Conference at La Sorbonne in Paris. This is an international event, hence all talks are performed in English. It offers a nice mix of academic and professional people, creating nice synergy and deep technical discussions.\nThis was in fact my first (ever) conference (opposed to smaller local events), as a speaker and as a participant. The public was also not very cybersecurity oriented, and mainly focused on low (and very low) level hardware design. So it wasn\u0026rsquo;t an easy journey, and was quite stressful (which impacted my English during the talk).\nThis was the official abstract of the talk:\nIn recent years, there has been a growing emphasis on security and trust in software and infrastructure, where security through obscurity is increasingly being countered by numerous auditing and reverse-engineering tools. In a context where many safety-critical components are implemented in hardware (TPM, cryptography, biometric authentication, crypto-asset securitization, RFID\u0026hellip;), we cannot trust a system simply by checking and validating its software (firmware, driver\u0026hellip;). While analyzing PCBs is accessible, going into the silicon to check implementations\u0026rsquo; security is a lot more complex and costly, but remain one of the only solution to fully trust a closed system (let aside reimplementation).\nDegate is an open-source tool for reverse engineering silicon chips, aimed at providing a complete workflow (from chip images to VHDL/Verilog) for community-led analysis. It can be used to understand old and recent chips, to check algorithms\u0026rsquo; implementations or to search for vulnerabilities and backdoors.\nThis talk introduces Degate, presents the challenges of reverse engineering silicon chips and shows a real-world analysis that led to critical discoveries. We first present the importance of low-level hardware validation for security, and list the tools and products available for this task. We then outline the background and current status of Degate, and all the associated engineering and research challenges. Finally, we take the famous case of the MIFARE Classic RFID chip as an example and look at the future horizon of reverse engineering silicon chips.\nTo be honest, regarding the areas of expertise of the public, I wasn\u0026rsquo;t sure if my talk could interest peoples (again), but in the end I got very nice feedback (again). The silicon chips reverse engineering field is so unknown, and connect so many specialties, that it actually has a fairly large potential audience. I also had interesting interactions after the talk, which confirmed the attractiveness of the field.\nSecSea2k24 Then, in October, I had the chance to make the closing talk of the SecSea 2024 conference. It was organized by the Hack In Provence association for its sixth edition, in the oldest cinema in the world, the Eden Cinema in La Ciotat. For me, it\u0026rsquo;s a very special event since no sponsor is authorized, and everything is oriented towards the community. This allows very different subjects and approaches to be presented, and is very welcoming to new speaker. In the end, it was the perfect place to present the silicon chips reverse engineering field, even if the public was very focused on the cybersecurity domain, with only a few people with bases in electronics or physics. This might be the best experience of the year I had presenting this talk.\nOnce again, I got interesting feedback about my presentation, and had the chance to have a talk on a side-channel attack at the opening of the conference, allowing the audience to have a panoramic view of the domain. And, at my surprise, I got cited on multiple posts regarding the conference afterward, with some people describing the talk as \u0026ldquo;intellectually challenging but enriching\u0026rdquo;.\nThis final event concluded the presentation window for this talk, although I may present it again at other venues if there is interest.\nResources You can find all the presentation supports of each talk on my website, the \u0026ldquo;final\u0026rdquo; version here and the sources on my github.\n\u0026nbsp;\u0026nbsp; Presentation PDF Download \u0026nbsp;\u0026nbsp;Presentation Sources Sourcedocumentclass[aspectratio=169]{beamer} \\usetheme{AnnArbor} \\definecolor{degatered}{rgb}{0.902,0.22,0.161} \\setbeamercolor{titlelike}{parent=structure,fg=white,bg=degatered} \\setbeamercolor*{palette primary}{bg=degatered!50!black,fg=white} \\setbeamercolor*{palette secondary}{bg=degatered!40!black,fg=white} \\setbeamercolor*{palette tertiary}{bg=degatered!30!black,fg=white} \\setbeamercolor*{palette quaternary}{bg=degatered!20!black,fg=white} \\setbeamercolor{frametitle}{bg=degatered} \\setbeamercolor{frametitle right}{bg=degatered!60!black} \\setbeamertemplate{bibliography item}{\\insertbiblabel} \\usepackage{tikz} \\title{\\textbf{\\underline{Degate}}} \\subtitle{The stakes and challenges of silicon reverse engineering \\\\ \\url{https://www.degate.org}} \\titlegraphic{\\includegraphics[width=2cm]{res/degate.png}} \\author{\\textbf{D.~Bachelot}} \\date{\\textbf{\\underline{Degate Community}},\\\\ 2024} \\logo{\\includegraphics[scale=0.08]{res/degate.png}} \\AtBeginSection[ ] { \\begin{frame}{} \\tableofcontents[currentsection] \\end{frame} } \\begin{document} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}[plain] \\maketitle \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{} \\tableofcontents \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\section{Silicon Chips Reverse Engineering} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\subsection{Introduction} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{} \\tableofcontents[currentsection, currentsubsection] \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{What is Silicon Chips RE?} \\begin{tabular}{cl} \\begin{tabular}{c} \\includegraphics[width=5.2cm]{res/chip_example.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\parbox{0.5\\linewidth}{\\scriptsize Same idea than with software RE (from binary, to assembly and to code), silicon chip RE go \\textbf{from silicon}, \\textbf{to images}, \\textbf{to transistors}, \\textbf{to gates}, \\textbf{to netlist} and \\textbf{to algorithm}. \\\\ With proper preparation and knowledge, we can go into silicon, \\textbf{analyze transistors}, \\textbf{retrieve gates/wires/vias} and \\textbf{reconstruct implemented algorithms}. This can be used to \\textbf{analyze old hardware}, build \\textbf{software emulators}, search for \\textbf{vulnerabilities} and \\textbf{backdoors}, \\textbf{break/test a protection}, \\textbf{secret extraction} or \\textbf{check intellectual property}. \\\\ \\textbf{Used in IC industry} for \\textbf{fault/failure detection} \\\u0026amp; analysis, but \\textbf{not at the same scale}. } \\end{tabular} \\end{tabular} \\begin{figure}[!ht] \\centering \\resizebox{0.7\\textwidth}{!}{% \\begin{tikzpicture} \\tikzstyle{every node}=[font=\\normalsize] \\draw (10.5,17.75) circle (2.5cm) node [text width=4cm] { \\Large \\centering \\textbf{Image chip} \\\\ \\vspace{3mm} \\textit{(or SEM scan or 3D tomography)} } ; \\draw (16.5,17.75) circle (2.5cm) node {\\Large \\textbf{Analyze Gates}} ; \\draw (22.5,17.75) circle (2.5cm) node {\\Large \\textbf{Trace Wires/Vias}} ; \\draw (28.5,17.75) circle (2.5cm) node {\\Large \\textbf{Generate Netlist}} ; \\draw [, dashed] (34.5,17.75) circle (2.5cm) node {\\Large \\textbf{Retrieve Algorithm}} ; \\draw [-\u0026gt;] (13,17.75) -- (14,17.75); \\draw [-\u0026gt;] (19,17.75) -- (20,17.75); \\draw [-\u0026gt;] (25,17.75) -- (26,17.75); \\draw [-\u0026gt;] (31,17.75) -- (32,17.75); \\end{tikzpicture} }% \\end{figure} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{How to Access Silicon?}\tCan be very costly (plasma \\\u0026amp; laser) and destructive... But also accessible with simpler methods (like chemical/mechanical). More on \\cite{SiliconPron}. \\begin{enumerate} \\item \\textbf{Decapsulation} (heat, acid, mechanical, plasma, laser...) \\item \\textbf{Delayering} (chemical, abrasive, laser, plasma...) \\item \\textbf{Cleaning} (ultrasound, acid...) \\end{enumerate} \\begin{center} \\includegraphics[width=4cm]{res/decap.jpg} \\cite{Holler2017} \\includegraphics[width=3cm]{res/delayer.png} \\cite{KarstenNohl2009} \\includegraphics[width=4.5cm]{res/delayered.png} \\tiny MIT \\end{center} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{How to Retrieve Images?} Using each layer (invasive) or directly using the chip (non-invasive): \\begin{itemize} \\item Take very-high resolution images from \\textbf{optical microscope} (basic, confocal) ; \\item Scan from an \\textbf{electron microscope} (SEM, TEM...) ; \\item Generate a 3D model using \\textbf{electron tomography} ; \\end{itemize} \\begin{center} \\includegraphics[width=5cm]{res/3d_1.png} \\includegraphics[width=5.4cm]{res/3d_2.png} \\cite{Holler2017} \\end{center} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{How to Perform the Analysis?} \\begin{tabular}{cl} \\begin{tabular}{c} \\parbox{0.5\\linewidth}{ \\vspace{-3mm} Overview: \\begin{enumerate} \\item Choose a \\textbf{zone of interest}, \\item Identify each \\textbf{gate type}, annotate, and place in a \\textbf{\u0026#34;gate library\u0026#34;}, \\item Find other \\textbf{gates instance} from gate library, \\item Link gates by tracing \\textbf{wires and vias}, \\item Export to \\textbf{netlist} (e.g. by translating each gate to VHDL/Verilog code). \\end{enumerate} } \\end{tabular} \u0026amp; \\begin{tabular}{l} \\includegraphics[width=6.25cm]{res/transistor.png} \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{How to identify a transistor?} \\begin{tabular}{cl} \\begin{tabular}{c} \\parbox{0.5\\linewidth}{\\small \\begin{enumerate} \\item Search, at transistor layer, for \\textbf{doped zones}. \\item Spot the \\textbf{zebras}. \\item Use logic to identify the \\textbf{type of each transistor} (e.g. PMOS are bigger to compensate with lower hole mobility). \\item Search for \\textbf{wires} (to identify inputs and outputs). \\end{enumerate} } \\end{tabular} \u0026amp; \\begin{tabular}{l} \\includegraphics[width=4cm]{res/npn.png} \\vspace{10mm} \\tiny (NMOS, \\textit{Wikipedia}) \\end{tabular} \\end{tabular} \\centering \\hspace{-40mm} \\includegraphics[width=2.5cm]{res/cmos.png} \\tiny (Inverter, \\textit{Wikipedia}) \\hspace{6mm} \\includegraphics[width=3cm]{res/dopant_pmos.png} \\tiny (PMOS \\cite{YenerBulent2014}) \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{How to Identify a Gate?} \\begin{tabular}{ccc} \\begin{tabular}{c} \\begin{tabular}{ccc} \\includegraphics[width=1.75cm]{res/ana_1.png} \u0026amp; \\includegraphics[width=1.75cm]{res/ana_2.png} \u0026amp; \\includegraphics[width=1.75cm]{res/ana_3.png} \\\\ \\tiny Transistor layer \u0026amp; \\tiny Logic layer \u0026amp; \\tiny Metal layer \\\\ \\end{tabular} \\\\ $\\Downarrow$ \\\\ \\begin{tabular}{cc} \\tiny \\includegraphics[width=1.75cm]{res/post_ana_1.png} \u0026amp; \\includegraphics[width=1.75cm]{res/post_ana_2.png} \\\\ \\tiny P \\\u0026amp; N zones and 2 inputs \u0026amp; \\tiny V+ \\\u0026amp; V-, and output \\\\ \\end{tabular} \\end{tabular} \u0026amp; $\\Rightarrow$ \u0026amp; \\ensuremath{\\vcenter{\\hbox{\\includegraphics[width=3cm]{res/ana_layout.png}}}} {\\tiny\\cite{SiliconZoo}} $\\Rightarrow$ \\begin{tabular}{c} \\textbf{NAND gate!} \\\\ \\includegraphics[width=2.5cm]{res/nand.png} \\\\ \\begin{tabular}{ | c | c || c | } \\hline A \u0026amp; B \u0026amp; Y \\\\ \\hline 0 \u0026amp; 0 \u0026amp; 1 \\\\ 1 \u0026amp; 0 \u0026amp; 1 \\\\ 0 \u0026amp; 1 \u0026amp; 1 \\\\ 1 \u0026amp; 1 \u0026amp; 0 \\\\ \\hline \\end{tabular} \\end{tabular} \\\\ \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{How to Retrieve the Netlist from Analyzed Gates?} \\begin{tabular}{cl} \\begin{tabular}{c} \\includegraphics[width=6cm]{res/verilog.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\parbox{0.5\\linewidth}{\\scriptsize \\begin{itemize} \\item Each gate can be described with \\textbf{hardware description language (HDL)}, like \\textbf{Verilog} or \\textbf{VHDL}. \\item \\textbf{Wires \\\u0026amp; vias} can also be described. \\item That\u0026#39;s all we need to \\textbf{obtain the netlist}! \\end{itemize} We can, from HDL, \\textbf{simulate the extracted netlist} and \\textbf{find incoherence} (\\textit{example with gtkwave below}): \\vspace{2mm} \\includegraphics[width=7cm]{res/gtkwave.png} } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{How to Get the Algorithm/Specification from Netlist? \\cite{LeonidAzriel2021}} \\small After retrieving the \\textbf{netlist}, we are left with a \\textbf{huge and \u0026#34;unorganized\u0026#34; number of gates}. The \\textbf{specification discovery} phase aims to \\textbf{retrieve IC\u0026#39;s algorithm/functionality} from the extracted netlist. \\vspace{3mm} Using specific algorithms you can \\textbf{automate some phase}: \\begin{itemize} \\item \\textbf{Partitioning} of the netlist (\\textit{to retrieve a semblance of \u0026#34;code\u0026#34; structure}). \\item \\textbf{Recovery} of the registers (\\textit{if applicable}). \\item \\textbf{Identification} of the extracted \u0026#34;groups\u0026#34; (\\textit{partitions}) of the netlist. \\item \\textbf{Construction} of a library of netlist components from the identified \u0026#34;groups\u0026#34;. \\end{itemize} \\vspace{3mm} These algorithms \\textbf{need to allow some degrees of error} from the netlist extraction. This phase is $\\sim$analogous with \\textbf{duplicated, standard \\\u0026amp; library functions identification} for \\textbf{software engineering}. A nice open source tool for this is \\textbf{HAL}\\footnote{https://github.com/emsec/hal} (compatible with Degate\u0026#39;s outputs!). \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{To Summarize} \\begin{figure}[!ht] \\centering \\resizebox{0.8\\textwidth}{!}{% \\begin{tikzpicture} \\tikzstyle{every node}=[font=\\normalsize] \\draw (10.5,17.75) circle (2.5cm) node [text width=4cm] { \\Large \\centering \\textbf{Image chip} \\\\ \\vspace{3mm} \\textit{(or SEM or 3D tomography)} } ; \\draw (16.5,17.75) circle (2.5cm) node {\\Large \\textbf{Analyze Gates}} ; \\draw (22.5,17.75) circle (2.5cm) node {\\Large \\textbf{Trace Wires/Vias}} ; \\draw (28.5,17.75) circle (2.5cm) node {\\Large \\textbf{Generate Netlist}} ; \\draw [, dashed] (34.5,17.75) circle (2.5cm) node {\\Large \\textbf{Retrieve Algorithm}} ; \\draw [-\u0026gt;] (13,17.75) -- (14,17.75); \\draw [-\u0026gt;] (19,17.75) -- (20,17.75); \\draw [-\u0026gt;] (25,17.75) -- (26,17.75); \\draw [-\u0026gt;] (31,17.75) -- (32,17.75); \\draw [, dashed] (8.25,15) rectangle node [text width=4cm] { - \\textbf{Decapsulate}, \\\\ - Select \\textbf{area of interest}, \\\\ - \\textbf{Delayer}, \\\\ - Clean, \\\\ - Stitch. } (12.75,10.25); \\draw [, dashed] (14.25,15) rectangle node [text width=4cm] { - Analyze transistors, \\\\ - \\textbf{Identify each type of gates}, \\\\ - Retrieve all instances of each gate (\\textbf{pattern matching}). } (18.75,10.25); \\draw [, dashed] (20.25,15) rectangle node [text width=4cm] { - Identify \\textbf{wires}, \\\\ - Identify \\textbf{vias}, \\\\ - \\textbf{Connect gates}. } (24.75,10.25); \\draw [, dashed] (26.25,15) rectangle node [text width=4cm] { - \\textbf{Export netlist}, \\\\ - Gate simulation, \\\\ - Try to identify errors. } (30.75,10.25); \\draw [, dashed] (32.25,15) rectangle node [text width=4cm] { - Extract algorithm, \\\\ - \\textbf{Discover specification}, \\\\ - Perform functional analysis\\cite{LeonidAzriel2021}, \\\\ - Build a \\textbf{software emulator}, \\\\ - Try to \\textbf{identify errors}. } (36.75,10.25); \\draw [] (10.5,15.25) -- (10.5,15); \\draw [] (16.5,15.25) -- (16.5,15); \\draw [] (22.5,15.25) -- (22.5,15); \\draw [] (28.5,15.25) -- (28.5,15); \\draw [] (34.5,15.25) -- (34.5,15); \\node (tikzmaker) [shift={(2.75, -0)}] at (7.5,7.25) {\\includegraphics[width=5cm]{res/how_1.png}\\cite{KarstenNohl2009}}; \\node (tikzmaker) [shift={(2.75, -0)}] at (13.5,7.25) {\\includegraphics[width=5cm]{res/how_2.png}\\cite{KarstenNohl2009}}; \\node (tikzmaker) [shift={(2.75, -0)}] at (19.5,6.5) {\\includegraphics[width=5cm]{res/how_3.png}\\cite{KarstenNohl2009}}; \\node (tikzmaker) [shift={(2.75, -0)}] at (25.5,7.25) {\\includegraphics[width=5cm]{res/how_4.png}\\cite{KarstenNohl2009}}; \\node (tikzmaker) [shift={(2.75, -0)}] at (31.75,7.25) {\\includegraphics[width=5cm]{res/how_5.png}\\cite{KarstenNohl2009}}; \\draw [, dashed] (10.25,10.25) -- (10.25,9.75); \\draw [, dashed] (16.25,10.25) -- (16.25,9.75); \\draw [, dashed] (22.25,10.25) -- (22.25,9.75); \\draw [, dashed] (28.5,10.25) -- (28.5,9.75); \\draw [, dashed] (34.5,10.25) -- (34.5,9.75); \\end{tikzpicture} }% \\end{figure} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\subsection{Challenges} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{} \\tableofcontents[currentsubsection] \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Cost Perspective (1/2)} \\textbf{Costly solutions will give best results}, and sometime reduce the difficulty for analysis software: \\begin{itemize} \\item \\textbf{Decapsulation/delayering:} plasma, laser, FIB ; \\item \\textbf{Imaging:} Scanning Electron Microscope (SEM), other electron microscope (TEM, STEM, LEEM, PEEM...) ; \\item \\textbf{3D modelization:} electron tomography (3D) ; \\end{itemize} \\vspace{3mm} Simpler methods rely on \\textbf{mechanical \\\u0026amp; chemical} decapsulation/delayering and \\textbf{optical microscopes} to obtain \\textbf{very-high resolution but imperfect images}. Using images is more challenging: \\textbf{color channels}, \\textbf{impurity/damage/dust}, \\textbf{single dimension}, \\textbf{stitching}, \\textbf{resolution}, \\textbf{laborious work}... \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Cost Perspective (2/2)} \\textbf{Chip samples cost} are also to consider (when doing invasive analysis, you\u0026#39;ll maybe need multiple samples of the chip). \\vspace{3mm} Compared to software reverse engineering, there is a \\textbf{lot more costs associated}, and a \\textbf{higher entry barrier}. \\vspace{3mm} \\begin{tabular}{cl} \\begin{tabular}{c} \\includegraphics[width=7.5cm]{res/sem.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\parbox{0.4\\linewidth}{\\small A \\textbf{new SEM microscope} can cost from \\textbf{70k\\$ to over 1M\\$}. \\textbf{Used instruments} can cost from \\textbf{2,5k\\$ to 550k\\$}. Resolution may vary a lot. \\\\ And that\u0026#39;s \\textbf{just for imaging}! \\vspace{12mm} \\textit{(Umeå University)} } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Analysis Perspective} \\begin{itemize} \\item Newest chips \\textbf{have $\\sim$3nm transistors} and \\textbf{billions of them}! \\item Need automatic \\textbf{gate recognition, wire tracing and netlist reconstruction}, which a human can\u0026#39;t handle alone. \\item Resulting images can be \\textbf{millions of pixels large} ($width$ $\u0026gt;$ million pixels)! \\item How to perform \\textbf{template matching/image recognition} on such \\textbf{gigantic images}? \\item How to handle \\textbf{all possible formats} (images, multi-layered images, SEM images, 3D tomography...)? \\item There are so \\textbf{many steps where that can go wrong}, or a \\textbf{small error slips} into the analysis... \\item Non-planerized IC exists (non repeated standard cells)! \\item And what about \\textbf{obfuscation}? \\end{itemize} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Human Perspective}\t\\begin{itemize} \\item Need a \\textbf{highly technical level} in several disciplines, this will help for \\textbf{error spotting}, choosing a \\textbf{zone of interest} and more. \\item Need to \\textbf{understand \u0026#34;silicon\u0026#34;} (how IC are made) and have \\textbf{low-level electronic knowledge}. \\item Have the necessary \\\\ \\textbf{equipment available}. \\item Be \\textbf{persistent} and \\textbf{patient}. \\item \\textbf{Practice}. \\item And \\textbf{Have time!} \\end{itemize} \\vspace{-30mm} \\hfill\\parbox{.65\\textwidth}{ \\includegraphics[width=9cm]{res/dect.png} } \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Importance for Cybersecurity} How can we \\textbf{trust software} if we \\textbf{can\u0026#39;t trust hardware} (e.g. \u0026#34;specialized\u0026#34; ASIC)? \\vspace{3mm} \\begin{itemize} \\item Is there any \\textbf{vulnerability in the hardware implementation} of an algorithm (e.g. crypto standard with predictable initialization, bad randomness...)? \\item Is there any \\textbf{hardware Trojan} (e.g. placed by the foundry)? \\item If there is a vulnerability/backdoor, \\textbf{patching is impossible}, far \\textbf{more impactful} than software vulnerabilities. \\end{itemize} \\vspace{3mm} Some examples of vulnerabilities found thanks to silicon RE: \\begin{itemize} \\item \\textit{Legic Prime}, \\textit{NXP Hitag2}, \\textit{DECT DSC}, \\textit{CryptoRF}, \\textit{Atmel CryptoMemory} \\\u0026amp; \\textit{NXP Mifare Crypto-1} ($\\sim$2008, Nohl et al): \\textbf{weak (or potentially weak) cryptographic ciphers}. \\item Undisclosed ones? \\end{itemize} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Available Tools \\\u0026amp; Products} \\begin{tabular}{cl} \\begin{tabular}{c} \\parbox{0.4\\linewidth}{\\small Commercial products: \\begin{itemize} \\item \\href{https://www.texplained.com/about-us/chipjuice-software/}{\\textbf{CHIPJUICE}}: Extracting Data from Highly Encrypted ICs. \\item \\textit{Internal tools}: for sure, there is a lot of them. \\end{itemize} \\vspace{3mm} Open Source tools: \\begin{itemize} \\item \\href{https://www.degate.org/}{\\textbf{Degate}} \\item \\href{https://github.com/emu-russia/psxrev}{\\textbf{psxrev}}: SONY PlayStation PCB/chips reverse engineering. \\item \\href{https://github.com/emu-russia/Deroute}{\\textbf{Deroute}}: Tool for untangling wires. \\item \\href{https://github.com/galibert/dietools}{\\textbf{dietools}}: Series of tools for die shot reverse-engineering. % from vectorization to netlist \\end{itemize} } \\end{tabular} \u0026amp; \\begin{tabular}{c} \\includegraphics[width=7cm]{res/chipjuice.jpg} \\\\ \\textit{\\small(Texplained)} \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\section{Degate} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Introduction} \\textbf{Degate} is a multi-platform software for semi-automatic \\textbf{Very-Large-Scale Integration (VLSI) chips reverse engineering} of digital logic in chips. \\vspace{3mm} \\begin{tabular}{cl} \\begin{tabular}{c} \\parbox{0.4\\linewidth}{\\small \\begin{itemize} \\item $\\sim$70k LoC \\item Supports Mac, Linux \\\u0026amp; Windows, \\item Qt based, \\item Multi-language support, \\item Gate definition, \\item Gate template, via \\\u0026amp; wire matching, \\item Rule checks, \\item ... \\end{itemize} } \\end{tabular} \u0026amp; \\begin{tabular}{l} \\includegraphics[width=7cm]{res/degate1.png} \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{History} A long story, with \\textbf{technical debt} and \\textbf{major IC evolution} (in transistor count), along with a \\textbf{small community}. \\vspace{-10mm} \\begin{center} \\begin{tikzpicture}[very thick, black, rotLabel/.style={above=3pt, anchor= south west, rotate=45}] \\small % draw a horizontal line \\draw (1,0) -- (14,0); % draw vertical lines \\foreach \\x in {1,2,4,9,10,11,12,14} \\draw (\\x cm,3pt) -- (\\x cm,-3pt); % draw nodes to add events \\draw (1,0) node[below=3pt] {2007} node[rotLabel] {Martin Schobert \\textbf{start developing Degate}}; \\draw (2,0) node[below=3pt] {2008} node[rotLabel] {Famous \\textbf{hardware ciphers analysis} w/ Degate}; \\draw (4,0) node[below=3pt] {2010} node[rotLabel] {End of Martin Schobert thesis}; \\draw (6.5,0) node[above=0pt] {\\footnotesize \\textit{(Minimum maintenance)}}; \\draw (9,0) node[below=3pt] {2018} node[rotLabel] {\\textbf{Forked}, major rewrite}; \\draw (10,0) node[below=3pt] {2019} node[rotLabel] {Vulgarization \\textbf{papers}, start working with a lab...}; \\draw (11,0) node[below=3pt] {2020} node[rotLabel] {Pandemic}; \\draw (12,0) node[below=3pt] {2021} node[rotLabel] {Degate \\textbf{2.0}}; \\draw (14,0) node[below=3pt] {2023} node[rotLabel] {Degate \\textbf{2.1 beta}}; \\end{tikzpicture} \\end{center} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Usage} Degate help to reverse \\textbf{VLSI chips} by creating an analyzed \\textbf{gate library}, doing \\textbf{template matching} to find gates instances from this library, \\textbf{matching wires \\\u0026amp; vias}, \\textbf{exporting netlist} and \\textbf{navigating really huge images}. \\\\ \\vspace{3mm} Focus on \\textbf{modern ICs} with \\textbf{standard cells}, and supports \\textbf{any 2D capture/imaging method} (SEM, optical...). \\begin{figure}[!ht] \\centering \\resizebox{0.7\\textwidth}{!}{% \\begin{tikzpicture} \\tikzstyle{every node}=[font=\\normalsize] \\draw [, line width=2pt, rounded corners = 93.8] (16.75,21) rectangle (31.5,14.75); % 16.75 -\u0026gt; 14.5 \\node [font=\\LARGE] at (24.25,21.5) {\\textbf{\\underline{Degate 2.0}}}; % 24.25 -\u0026gt; 22.5 \\draw [dashed, line width=2pt, rounded corners = 140] (13.5,23) rectangle (34.325,12.75); % 16.75 -\u0026gt; 14.5 \\node [font=\\LARGE] at (24.25,13.5) {\\textit{\\underline{Degate 3.0}}}; % 24.25 -\u0026gt; 22.5 \\draw (10.5,17.75) circle (2.5cm) node [text width=4cm] { \\Large \\centering \\textbf{Image chip} \\\\ \\vspace{3mm} \\textit{(or SEM scan or 3D tomography)} } ; \\draw (16.5,17.75) circle (2.5cm) node {\\Large \\textbf{Analyze Gates}} ; \\draw (22.5,17.75) circle (2.5cm) node {\\Large \\textbf{Trace Wires/Vias}} ; \\draw (28.5,17.75) circle (2.5cm) node {\\Large \\textbf{Generate Netlist}} ; \\draw [, dashed] (34.5,17.75) circle (2.5cm) node {\\Large \\textbf{Retrieve Algorithm}} ; \\draw [-\u0026gt;] (13,17.75) -- (14,17.75); \\draw [-\u0026gt;] (19,17.75) -- (20,17.75); \\draw [-\u0026gt;] (25,17.75) -- (26,17.75); \\draw [-\u0026gt;] (31,17.75) -- (32,17.75); \\end{tikzpicture} }% \\end{figure} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Small Demonstration} \\begin{tabular}{cl} \\begin{tabular}{l} \\hspace{-8mm} \\includegraphics[width=0.8\\textwidth]{res/degate_overview.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\hspace{-8mm} \\parbox{0.225\\textwidth}{\\footnotesize Overview of the chip, for zone of interest selection. \\\\ A sub-project can then be created on the zone of interest, and specific layers can be added (independent from the rest). } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Small Demonstration} \\begin{tabular}{cl} \\begin{tabular}{l} \\hspace{-8mm} \\includegraphics[width=0.8\\textwidth]{res/degate_layers.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\hspace{-8mm} \\parbox{0.225\\textwidth}{\\footnotesize Each sub-project can contains multiple layers (pre-aligned images). \\\\ Two project mode: 1. For smaller images, will convert each images in Degate\u0026#39;s format (for fast access) and 2. New (WIP, beta) mode for huge images (load only partial tiles in RAM, and doesn\u0026#39;t change/import initial file). } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Small Demonstration} \\begin{tabular}{cl} \\begin{tabular}{l} \\hspace{-8mm} \\includegraphics[width=0.8\\textwidth]{res/degate_gate.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\hspace{-8mm} \\parbox{0.225\\textwidth}{\\footnotesize Each gate can be described with VHDL/Verilog, have a list of port (placed on image), a type associated etc. } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Small Demonstration} \\begin{tabular}{cl} \\begin{tabular}{l} \\hspace{-8mm} \\includegraphics[width=0.8\\textwidth]{res/degate_instance.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\hspace{-8mm} \\parbox{0.225\\textwidth}{\\footnotesize Each identified gate (from the gate library) can be matched manually or using template matching algorithms. } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Small Demonstration} \\begin{tabular}{cl} \\begin{tabular}{l} \\hspace{-8mm} \\includegraphics[width=0.8\\textwidth]{res/degate_matching.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\hspace{-8mm} \\parbox{0.225\\textwidth}{\\footnotesize Template matching (will soon be ported to OpenCV) will use gate library to automate gate identification. \\\\ Currently it uses normalized cross-correlation (with some more steps). } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Small Demonstration} \\begin{tabular}{cl} \\begin{tabular}{l} \\hspace{-8mm} \\includegraphics[width=0.8\\textwidth]{res/degate_wires.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\hspace{-8mm} \\parbox{0.225\\textwidth}{\\footnotesize Wire matching, and specifically port interconnection, is the real challenge (and very error prone). \\\\ Currently it uses zero crossing edge detection. } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Small Demonstration} \\begin{tabular}{cl} \\begin{tabular}{l} \\hspace{-8mm} \\includegraphics[width=0.8\\textwidth]{res/degate_rule.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\hspace{-8mm} \\parbox{0.225\\textwidth}{\\footnotesize Helpers are available, like rudimentary (but to be improved) rule checking (e.g. for coherency). } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Small Demonstration} \\begin{tabular}{cl} \\begin{tabular}{l} \\hspace{-8mm} \\includegraphics[width=0.8\\textwidth]{res/degate_modules.png} \\end{tabular} \u0026amp; \\begin{tabular}{l} \\hspace{-8mm} \\parbox{0.225\\textwidth}{\\footnotesize Everything can be organized in \u0026#34;module\u0026#34;, exported individually (in Verilog/VHDL), etc... \u0026#34;Divide et impera\u0026#34;. } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Engineering Challenges}\t\\begin{tabular}{cl} \\begin{tabular}{l} \\parbox{0.6\\textwidth}{ \\begin{itemize} \\item Gate template, wires \\\u0026amp; vias \\textbf{matching}. \\item Very \\textbf{huge images} handling. \\item \\textbf{Error} recovery/acceptance/identification. \\item Multiple possible \\textbf{image format} (e.g. .tiff, .png...) \\\u0026amp; \\textbf{image source} (e.g. SEM, confocal...). \\item 10+ years \\textbf{old software} (mix of old \\\u0026amp; new C++). \\item \\textbf{Collaborative} analysis. \\item Integrated \\textbf{gate analyzer}. \\item Explicit full \\textbf{netlist exporter}. \\end{itemize} } \\end{tabular} \u0026amp; \\vspace{8mm} \\begin{tabular}{cc} \\includegraphics[width=1.55cm]{res/nand_mifare_transistor.png} \u0026amp; \\includegraphics[width=1.45cm]{res/nand_legic_transistor.png} \\\\ \\includegraphics[width=1.48cm]{res/nand_mifare_logic.png} \u0026amp; \\includegraphics[width=1.45cm]{res/nand_legic_logic.png} \\\\ \\tiny MIFARE NAND\\cite{KarstenNohl2009} \u0026amp; \\tiny LEGIC NAND\\cite{KarstenNohl2009} \\\\ \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Research Challenges} \\begin{itemize} \\item \\textbf{3D capture}, imply rethinking Degate (New 3D mode? New software? Really accessible?), and \\textbf{new algorithms} (e.g. for matching, tracing and gate identification). \\item \\textbf{Machine learning}/better algorithms for: \\begin{itemize} \\item Auto-\\textbf{vectorization} ; \\item Gate auto \\textbf{identification} (from vectorized analysis) ; \\item Gate auto \\textbf{wiring} ; \\item Auto vias \\\u0026amp; wires \\textbf{identification}. \\end{itemize} \\item Take advantage of certain capture methods such as \\textbf{SEM} which makes \\textbf{automation easier}. \\item Making the \\textbf{field more accessible} (more automation, new abstractions for analysis, communication...). \\item Use Degate for \\textbf{advanced analysis} and \\textbf{published results}. \\end{itemize} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\section{MIFARE Classic Chip Reverse Engineering Case} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{MIFARE Classic Chip \\cite{KarstenNohl2009}} \\begin{tabular}{cc} \\begin{tabular}{c} \\parbox{0.5\\textwidth}{\\small \\vspace{-6mm} \\begin{itemize} \\item \\textbf{RFID card} from NXP launched in 1994. \\item Used the \\textbf{Crypto1 cypher} (until MIFARE Classic EV1, that are using \\textbf{Hitag2} cipher). \\item \\textbf{Proprietary encryption} algorithm (stream cipher), security by obscurity. \\item Cryto1 cipher is only \\textbf{implemented in hardware}. \\item Used (back in 2008) in more than \\textbf{3.5 billions cards} (including many building access control systems). \\end{itemize} \\vspace{3mm} A \\textbf{huge target} with a \\textbf{suspicious cypher} and \\textbf{security standards}? } \\end{tabular} \u0026amp; \\begin{tabular}{c} \\includegraphics[width=0.4\\textwidth]{res/mifare.png} \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Degate\u0026#39;s origins \\cite{NohlEvans2008}} \\begin{tabular}{cc} \\begin{tabular}{c} \\hspace{-7mm} \\includegraphics[width=0.4\\textwidth]{res/mifare_reverse2.png} \\end{tabular} \u0026amp; \\begin{tabular}{c} \\hspace{-10mm} \\parbox{0.6\\textwidth}{\\footnotesize \\begin{itemize} \\item K. Nohl \\\u0026amp; Starbug \\textbf{reverse-engineered the Crypto1 cypher} from MIFARE Classic chip in 2007. \\item Used \\textbf{acetone} to dissolve the RFID cards. \\item Used \\textbf{manual polishing} for delayering. \\item Image a total of \\textbf{6 layers}. \\item Identify zone of interest, \\textbf{searching for 48-bit register} \\\u0026amp; group of XOR gates. \\item Used \\textbf{standard optical microscope} (500x) \\\u0026amp; hugin tool for stitching. \\item Identified \\textbf{around 70 types of gates}. \\item Used \\textbf{home-made scripts} (which became the base of Degate) for \\textbf{template matching} to identify all gates. \\item \\textbf{Manually} reconstructed \\textbf{connections} between gates. \\item Made a \\textbf{script} to help detecting \\textbf{wires} \\\u0026amp; \\textbf{vias}. \\end{itemize} } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Consequences \\cite{NohlEvans2008}} \\begin{tabular}{cc} \\hspace{-10mm} \\parbox{0.6\\textwidth}{\\footnotesize \\begin{itemize} \\item Using the reverse-engineering results and protocol analysis, authors found \\textbf{multiple weakness} in the cipher: \\begin{itemize} \\item The cipher is vulnerable to \\textbf{brute force} attack, key is too small. \\item RNG is predictable, it uses a 16-bit LFSR (linear feedback shift register) \\textbf{initialized with constant value} and reset at each power-up. \\item There is \\textbf{only one secret key} for each ID that can result to a specific session key, and all shifts are linear. \\end{itemize} \\item Meaning that just by \\textbf{sniffing interactions} with the card and the reader, we can compute the key and \\textbf{retrieve all the data} of the card. \\item NXP release a retro-compatible \\\u0026amp; \u0026#34;hardened\u0026#34; version of the Cipher (Hitag2), which was also weak, MIFARE Classic were \\textbf{\u0026#34;discontinued\u0026#34; in 2015}. \\end{itemize} } \u0026amp; \\begin{tabular}{c} \\begin{tabular}{c} \\hspace{-7mm} \\includegraphics[width=0.4\\textwidth]{res/crypto1.png} \\end{tabular} \\\\ \\hspace{-10mm} \\parbox{0.35\\textwidth}{\\footnotesize \\begin{itemize} \\item Authors \\textbf{analyzed other RFID devices} after. \\item \\textbf{Degate was created} from this analysis, used for other RFID devices reverse-engineering and open-sourced in 2008. \\end{itemize} } \\end{tabular} \\end{tabular} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\section{Future of Silicon Chip Reverse Engineering} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Future of Silicon Chip RE} \\begin{itemize} \\item \\textbf{Simpler} and \\textbf{cheaper} IC capture (decap \\\u0026amp; delayer). \\item Making the \\textbf{field more accessible} (communication, more real-life and useful example/reference analysis...). \\item \\textbf{Shared and open} library of \\textbf{chips captures} ($\\sim$zeptobar \\\u0026amp; siliconpr0n + SiliconZoo). \\item \\textbf{Machine learning} to automate even more analysis steps (\\textit{gate identification, wire extract, algorithm retrieving \\\u0026amp; analysis})? \\end{itemize} \\vspace{3mm} There is \\textbf{2 EU projects} running around \\textbf{ICs reverse-engineering}, but no information on tools, process and analysis \\underline{\\textbf{sharing}}. \\begin{center} \\begin{tabular}{cccc} \\hspace{-13mm} \\begin{tabular}{c} \\includegraphics[width=0.27\\textwidth]{res/google_scholar.png} \\end{tabular} \u0026amp; \\begin{tabular}{c} \\includegraphics[width=0.25\\textwidth]{res/old_google_scholar.png} \\end{tabular} \u0026amp; \\hspace{10mm} \\begin{tabular}{c} \\includegraphics[width=0.1\\textwidth]{res/ForRES.png} \\end{tabular} \u0026amp; \\begin{tabular}{c} \\includegraphics[width=0.1\\textwidth]{res/ORSHIN.png} \\end{tabular} \\end{tabular} \\end{center} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\section{Bonus} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}{Which gate is this?} % This is a nand, inversed on y axis \\begin{center} \\begin{tabular}{ccc} \\includegraphics[width=2.6cm]{res/nand2_transistor_a.png} \u0026amp; \\includegraphics[width=2.6cm]{res/nand2_logic_a.png} \u0026amp; \\includegraphics[width=2.6cm]{res/nand2_metal_a.png} \\\\ \\tiny Transistor layer \u0026amp; \\tiny Logic layer \u0026amp; \\tiny Metal layer \\\\ \\end{tabular} \\end{center} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\section{References} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\begin{frame}[allowframebreaks]{References} \\bibliographystyle{plain} \\bibliography{bibli} \\nocite{*} \\end{frame} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \\end{document} Everything (except Degate\u0026rsquo;s code, which is GPLv3) is under CC0 license, hence public domain. Feel free to reuse the support, tweak it or present it, even if not crediting me. However, please note that some figures are using a specific, non-CC0, license.\nAcknowledgement I want to thank the original author of Degate, Martin Schobert, and Starbug \u0026amp; Karsten Nohl for their work around silicon chips reverse engineering which inspired me a lot (and were the foundation of Degate).\nI also want to thank the community around Degate, contributors and users, for keeping the project alive. And I cannot forget the wider community around the domain of silicon chips reverse engineering, with John McMaster, Ken Shirriff, ZeptoBars or all the others.\nAnd finally, the last releases of Degate were partially sponsored by Anton Kochkov (XVilka), such as the work for this talk. A very huge thank to him.\nReferences Mirko Holler, Manuel Guizar-Sicairos, Esther H. R. Tsai, Roberto Dinapoli, Elisabeth Muller, Oliver Bunk, Jorg Raabe, and Gabriel Aeppli. High-resolution non-destructive three-dimensional imaging of integrated circuits. Nature, 543(7645):402–406, March 2017. Starbug Karsten Nohl. Pacsec silicon conference. 2009. Nils Albartus Ran Ginosara Avi Mendelson Leonid Azriel, Julian Speith and Christof Paar. A survey of algorithmic methods in IC reverse engineering. Cryptology ePrint Archive, Paper 2021/1278, 2021. John McMaster. Siliconpr0n, https://siliconpr0n.org/. Karsten Nohl, David Evans, and Henryk Plotz. Reverse-Engineering a Cryptographic RFID Tag. page 9. Martin Schobert. Gnu software degate. Webpage: http://www.degate.org Berlin Security Research Labs. Siliconzoo, http://siliconzoo.org. Ken Shirriff. Ken shirriff’s blog, https://www.righto.com/. Mikhail Svarichevsky. Zeptobars, https://zeptobars.com/en/. Zonenberg Andrew Yener Bulent. Csci 4974/6974 hardware reverse engineering, 2014. ","date":"2024-12-03T12:00:00+02:00","image":"https://dorianb.net/blog/my-talk-about-silicon-chips-reverse-engineering-and-degate/image.png","permalink":"https://dorianb.net/blog/my-talk-about-silicon-chips-reverse-engineering-and-degate/","title":"My Talk About Silicon Chips Reverse Engineering and Degate"},{"content":"This post was written in 2022, but I had never posted it by accident. Published in October 2024.\nIntroduction To continue our previous post about the WPICTF 2022 (online, hosted by Worcester Polytechnic Institute Cyber Security Club), we will focus our attention on a pwn challenge. And to change, this time we\u0026rsquo;ll use Ghidra rather than Cutter 😎\nA x64 ELF binary is provided with this challenge, no code is given.\nRecon We explore the terminal user interface (TUI) of the binary, and we find the potential buffer overflow in the B - Name a cat submenu. Let\u0026rsquo;s try to get the offset with gdb-peda:\n1 2 3 4 5 6 7 8 $ pattern create 100 $ r B [paste pattern] A [=\u0026gt; overflow (no RIP erase)] $ pattern_search [=\u0026gt; overflow (RAX erase and RIP pointing to call [RAX])]] As we can see, it will not be that trivial to exploit the vulnerability since RIP is not directly controlled. However, we can see that RIP will point to a call instruction, with the function address stored in RAX, and RAX retrieve this function adress from the value pointed by R12:\nSo, to summarize:\nWe can change what is pointed by R12 with the overflow, This will change the value of RAX, RAX is then used as a function pointer in a call, We can translate in pseudo-code what is happening call *(*(R12)), or simpler:\n1 2 R12 = \u0026amp;(overflow[??]) call *(*R12) = call *overflow[??] Then, we can control the flow and if we change what is pointed by R12 to a pointer to a vulnerable code, we win.\nWithout reversing we already have a lot of information, but to validate our hypothesis we will have to open Ghidra. We quickly find that the code is in C++ (good news) and therefore there is a lot of garbage code. We start to focus on the Cat structure (we can make the hypothesis that it\u0026rsquo;s a class) and find some interesting information using the structure editor of Ghidra:\nAs we can see, the Cat class is composed of a name field of 64 bytes (where the overflow is happening) and a super interesting function pointer vptr_Cat. We know that this a sign of a vtable and confirm that Cat is a class, that surely deal with inheritance.\nAs a reminder of what a vtable is, let\u0026rsquo;s read a bit of Wikipedia:\nIn computer programming, a virtual method table (VMT), virtual function table, virtual call table, dispatch table, vtable, or vftable is a mechanism used in a programming language to support dynamic dispatch (or run-time method binding). Whenever a class defines a virtual function (or method), most compilers add a hidden member variable to the class that points to an array of pointers to (virtual) functions called the virtual method table. These pointers are used at runtime to invoke the appropriate function implementations, because at compile time it may not yet be known if the base function is to be called or a derived one implemented by a class that inherits from the base class.\nTypically, the compiler creates a separate virtual method table for each class. When an object is created, a pointer to this table, called the virtual table pointer, vpointer or VPTR, is added as a hidden member of this object. As such, the compiler must also generate \u0026ldquo;hidden\u0026rdquo; code in the constructors of each class to initialize a new object\u0026rsquo;s virtual table pointer to the address of its class\u0026rsquo;s virtual method table.\nSince everything is better explained with a diagram, here is one:\nIf you want to delve deeper into the subject, a good reference is available here: SMASHING C++ VPTRS. We can see the vtable in gdb:\nSo, we know via gdb that we need to deal with a function pointer to exploit the buffer overflow, and we just saw that the overflowable Cat class contains a vptr. We are close to victory, now we just have to make a choice to exploit the situation:\nPlace our own vtable (pointer) in memory and make R12 point to it, Use the current vtable, but call a vulnerable function. The second option is the simplest, but we need to dig a bit more to make a definitive choice. So let\u0026rsquo;s check the binary\u0026rsquo;s protections:\n1 2 3 4 5 CANARY : ENABLED FORTIFY : disabled NX : disabled PIE : disabled RELRO : Partial That\u0026rsquo;s good, we can use both techniques without issue (we don\u0026rsquo;t have to deal with any canaries for this buffer overflow). Now let\u0026rsquo;s find the offset to control R12:\nThe offset is 64 (name) + 8 (padding) to control what is pointed by R12 and therefore RAX. We can now search for a vulnerable function in Ghidra by searching for a reference to flag.txt (CTF classic):\nVulnerable function found, in place of the pet function of the HackerCat structure. After a bit more digging in Ghidra, we know that HackerCat inherit from the Cat class, and that the function pet is a virtual function. Therefore, to call this function the binary will use the vtable of the concerned object.\nTo call a virtual function at runtime, the binary will use this format: (*(vtable_addr) + function_offset)(). After a quick look in Ghidra we can find that the pet virtual function is not the first in the vtable (function_offset is not 0), and therefore a call to this function will have this form:\n1 2 3 vptr = \u0026amp;vtable pet_fn_offset = ?? call [*(vptr + pet_fn_offset)] However, we found that a virtual function is called when doing A - List all cats, and it\u0026rsquo;s the first in the vtable (function_offset is 0). Therefore we end with this layout:\n1 2 vptr = \u0026amp;vtable call [*vptr] So we have again two possibilities:\nWe can make an exploit using C - Pet a cat that will call the pet virtual function. This implies using the vtable of the HackerCat class to be able to call the HackerCat::pet win function. We can use A - List all cats that call another virtual function. This implies replacing a virtual function address with HackerCat::pet. In a diagram this translates to (we find at the top the initial situations, and at the bottom the corresponding exploitation path):\nBoth options are good, but let\u0026rsquo;s take the second option that is simpler to debug. Let\u0026rsquo;s retrieve the vtable address of HackerCat and the address of the pointer to HackerCat::pet in the same table:\nNow, our plan is complete and, since there are no particular protections, we can test everything locally and find the right addresses, then we will just have to replay the same sequence on the online address. The plan is therefore as follows:\nWe know that we can overwrite the address of the vtable of Cat objects. We know that pointers to (virtual) functions in this vtable are called for A - List all cats and C - Pet a cat TUI commands. We know that the function which will give us the flag is HackerCat::pet. We know that if we replace the vptr pointer of a Cat object with the HackerCat::pet pointer of the vtable we win. So we just have to send an input in the menu \u0026ldquo;B - Name a cat\u0026rdquo; which contains the overflowable input with 72 bytes of garbage and then the address of the pointer to the function HackerCat::pet, which can be found in the vtable of HackerCat via Ghidra. This gives us the following exploit (that is very simple, but we like overthinking here):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 from ctypes import LittleEndianStructure from gc import garbage from pwn import * context.arch = \u0026#39;amd64\u0026#39; context.endian = \u0026#39;little\u0026#39; r = remote(\u0026#39;calicovision.wpi-ctf-2022-codelab.kctf.cloud\u0026#39;, 1337) # since we can erase the vtable address, the form of the call will be (*(vtable))() # so we need to place the address of a pointer to the right function # to do that, we can use the vtable of the already existing object we want to use (HackerCat) # Trigger the BOF garbage = b\u0026#39;A\u0026#39; * 72 # Here we place the address of the vtable pointer to HackerCat::pet =\u0026gt; 0x5b0078. function_address = p64(0x5b0078) exploit = garbage + function_address print(r.recvlines(13)) # B - rename cat r.sendline(\u0026#39;B\u0026#39;) # New name = exploit r.sendline(exploit) # A - list cats r.sendline(b\u0026#39;A\u0026#39;) print(r.recvall(timeout=2)) r.close() And we get the flag: WPI{c0rrup73d_c475_cr3473_ch405}.\nIn the end, this was very simple, but allowed us to manipulate vtables and many tools.\n","date":"2022-11-05T10:00:00+02:00","image":"https://dorianb.net/blog/wpictf-2022-pwn-calicovision/gdb_overflow.png","permalink":"https://dorianb.net/blog/wpictf-2022-pwn-calicovision/","title":"WPICTF 2022 - PWN - Calicovision"},{"content":"This post was written in 2022, but I had never posted it by accident. Published in October 2024.\nIntroduction To do a small warming up before the Purple Pill Challenge CTF, we participated in the WPICTF 2022 CTF (online, hosted by Worcester Polytechnic Institute Cyber Security Club). Since the solved reverse challenges were a bit simple, you\u0026rsquo;ll find in this post a collection of some of them rather than a single one (opposed to the tradition).\nTaylor\u0026rsquo;s Serious Data This was a (very) simple one. We were given an x64 ELF binary with a text file \u0026ldquo;songLyrics.txt\u0026rdquo; that seems encrypted. After opening the binary in Cutter, we can find the encryption routine in the main function:\nAs we can see in the decompiler window, the binary takes two arguments:\nAn initial file path, A file path to store the decrypted version of the first file. Then, the function load a file from disk (for sure the songLyrics.txt file), and read it. After that, it retrieves the content size of the file, and start the decryption loop. When dealing with this kind of loop, I prefer to deal with the assembly directly rather the decompiler. After a simple analysis, I found that the decryption loop was:\n1 2 for character c in file: output = c * 7 + 34 As we can see, the Ghidra decompiler was right (this time 😁), and we can write a simple python script that will decrypt the given file for us:\n1 2 3 4 5 6 7 8 9 10 11 12 file = open(\u0026#39;./songLyrics.txt\u0026#39;, \u0026#39;r\u0026#39;) content = file.read() content = content.split() for char in content: c = int(char) a = int((c - 0x22) / 0xd) print(chr(a), end=\u0026#39;\u0026#39;, sep=\u0026#39;\u0026#39;) file.close() We then obtain the decrypted version of our file (and the filename was right, it\u0026rsquo;s a song lyric):\n1 2 3 4 5 6 7 ... But I got smarter, I got harder in the nick of time [...] Honey, WPI{TaYl0rs_v3rS1oN} I rose up from the dead, I do it all the time I got a list of names, and yours is in red, underlined [...] ... And we get the flag WPI{TaYl0rs_v3rS1oN}. This was a very simple warmup, no tricky things here.\nxf1ltr80r Let\u0026rsquo;s investigate a second challenge. We start with a x64 ELF binary, and since I liked using Cutter on the previous challenge, I\u0026rsquo;ll continue with it. After opening the binary, we easily find the function containing \u0026ldquo;data to exfiltrate\u0026rdquo;:\nThe padding (==) at the end of the many blobs of data seem to indicate a base64 encoded string. Let\u0026rsquo;s retrieve the full encoded string:\n1 V1BJezN4dHIzbTNseV9uI3JkeV8xMzM3NXAzNGt9Cg== We can now use Cyberchef to perform the operation:\nAnd another flag: WPI{3xtr3m3ly_n#rdy_13375p34k}. Very trivial.\nNeedToCough This is the last \u0026ldquo;easy\u0026rdquo; challenge I did and it was, in my opinion, the best one (still trivial, but the journey was nice and somehow realistic). We start the challenge with a pcap file that contains multiple HTTP requests and an encrypted file that was a jpg image. After analyzing some frames, I found that these requests contained a file. Therefore, I exported it using Wireshark:\nI obtained (again) a nice x64 ELF binary file. Since it worked well for the previous challenges, I stayed with Cutter here, and analyzed the code. After a high level review on the disassembly, I found that the majority of the code was garbage about a notice drop (ransomware-like), so I focused on the encryption loop. I found four interesting functions:\nOne that converts an input to hexadecimal code, A second that generates a hexadecimal table (for the permutation), An encryption function that uses a permutation table (over hexadecimal), And a last one that generates the permutation table. The part that generates the permutation table is at the beginning of a function that also deals with the notice part (useless here):\nAs I said before, I prefer to look at the assembly rather than the decompiler code (especially when you see how little code is present). I extracted this pseudo-code used to generate the permutation table:\n1 2 for i in [0,16]: output[i] = key1[i % 0x17] ^ key2[i] I then successfully extracted the two keys key1 and key2 from the binary:\n1 2 3 # Extracted key1 key1_first = \u0026#39;6874202e2e2e6159\u0026#39; key1_second = \u0026#39;6157207369207369\u0026#39; Since we were in little endian, we needed to convert it before concatenation:\n1 2 3 4 5 6 # Convert it since we are in little endian key1_first = bytearray.fromhex(key1_first) key1_first.reverse() key1_second = bytearray.fromhex(key1_second) key1_second.reverse() key1 = key1_first + key1_second We do the same with the key2:\n1 2 3 4 5 6 7 8 9 10 # Extracted key2 key2_first = \u0026#39;5d46661f181e226e\u0026#39; key2_second = \u0026#39;2316644050143651\u0026#39; # Convert it since we are in little endian key2_first = bytearray.fromhex(key2_first) key2_first.reverse() key2_second = bytearray.fromhex(key2_second) key2_second.reverse() key2 = key2_first + key2_second We can now recreate the algorithm that generates the permutation table:\n1 2 3 4 # Generate the permutation table from the two keys permutation_table = [None] * 16 for i in range(0x10): permutation_table[i] = chr(key1[i % 0x17] ^ key2[i]) Then, we can continue with another easy part, by analyzing the hexadecimal table generation code:\nWe can translate this assembly function to python:\n1 2 3 4 5 6 7 8 9 table = [None] * (9 + 7) # First loop, for the first 9 characters for i in range(9, -1, -1): table[9 - i] = chr(ord(\u0026#39;9\u0026#39;) - i) # Second loop, for the 7 remaining characters for i in range(1, 7, 1): table[9 + i] = chr(i + ord(\u0026#39;@\u0026#39;)) As we can see, it\u0026rsquo;s a complicated code for a simple task, in the end it just generate this string:\n1 0123456789ABCDEF We can now analyze the main encryption loop:\nAs we can see in Cutter, the permutation loop is very simple, and we can reconstruct it in python:\n1 2 3 4 for i in range(0xbeca): for j in range(0x10): if initial_image[i] == table[j]: encrypted_image[i] = permutation_table[j] We then revert the operation and get this python code:\n1 2 3 4 for i in range(0xbeca): for j in range(0x10): if encrypted_image[i] == permutation_table[j]: initial_image[i] = table[j] Since our image already contains the ASCII representation of the file content in hexadecimal, we can retrieve the initial image with this python code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 # Extracted key1 key1_first = \u0026#39;6874202e2e2e6159\u0026#39; key1_second = \u0026#39;6157207369207369\u0026#39; # Extracted key2 key2_first = \u0026#39;5d46661f181e226e\u0026#39; key2_second = \u0026#39;2316644050143651\u0026#39; # Convert it since we are in little endian key1_first = bytearray.fromhex(key1_first) key1_first.reverse() key1_second = bytearray.fromhex(key1_second) key1_second.reverse() key1 = key1_first + key1_second # Convert it since we are in little endian key2_first = bytearray.fromhex(key2_first) key2_first.reverse() key2_second = bytearray.fromhex(key2_second) key2_second.reverse() key2 = key2_first + key2_second # Generate the permutation table from the two keys permutation_table = [None] * 16 for i in range(0x10): permutation_table[i] = chr(key1[i % 0x17] ^ key2[i]) table = [None] * (9 + 7) # First loop, for the first 9 characters for i in range(9, -1, -1): table[9 - i] = chr(ord(\u0026#39;9\u0026#39;) - i) # Second loop, for the 7 remaining characters for i in range(1, 7, 1): table[9 + i] = chr(i + ord(\u0026#39;@\u0026#39;)) # Comp = out = res (what we need to retrieve) initial_image = [None] * 0xbeca # Out = pvVar2 = encrypted (what we know) file = open(\u0026#39;./flag.cough\u0026#39;, \u0026#39;r\u0026#39;) encrypted_image = file.read() file.close() # Logic for i in range(0xbeca): for j in range(0x10): if encrypted_image[i] == permutation_table[j]: initial_image[i] = table[j] # Dump flag f = open(\u0026#39;./flag.jpg\u0026#39;, \u0026#39;wb\u0026#39;) f.write(flag) f.close() A tip I used to debug this script was checking that we get the magic number of JPEG files for the first bytes. This can also be used to brute force the permutation table (if you don\u0026rsquo;t like reverse engineering 😉).\nAfter running the script on the provided file (containing the encrypted image to retrieve), I obtained the initial image:\nAnd the flag was WPI{cybercriminals != pentesters}!\nThanks for this well-made challenge, that were not difficult but well constructed (from Wireshark to reverse).\nConclusion Those reverse challenges were fun to complete even if a bit too simple. They were a good training for our big event (the Purple Pill Challenge CTF) that were 5 days after this one. Maybe it can help someone getting into reverse 🤷‍♂️\n","date":"2022-10-04T18:35:19+02:00","image":"https://dorianb.net/blog/wpictf-2022-reverse-warmup/1_cutter.png","permalink":"https://dorianb.net/blog/wpictf-2022-reverse-warmup/","title":"WPICTF 2022 - Reverse - Warmup"}]